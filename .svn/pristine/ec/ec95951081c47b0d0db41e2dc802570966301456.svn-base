from django.contrib.auth.base_user import AbstractBaseUser
from django.db import models
from django_enumfield import enum

from healthnet.core.logging import Logging


class UserType(enum.Enum):
    Administrator = 0
    Doctor = 1
    Nurse = 2
    Patient = 3


class User(AbstractBaseUser):
    username = models.CharField(max_length=25, null=False, unique=True)
    first_name = models.CharField(max_length=50, blank=True)
    last_name = models.CharField(max_length=50, blank=True)

    is_admin = models.BooleanField(default=False)
    is_doctor = models.BooleanField(default=False)
    is_patient = models.BooleanField(default=False)
    is_nurse = models.BooleanField(default=False)

    appointments = models.ManyToManyField('Appointment', blank=True)

    USERNAME_FIELD = 'username'

    @staticmethod
    def create_user(username, password, usertype, first_name="", last_name=""):
        user = User(username=username, first_name=first_name, last_name=last_name)

        if type(usertype) is not UserType:
            return False, 'Provided usertype is not of type UserType'

        if usertype == UserType.Administrator:
            user.is_admin = True
        elif usertype == UserType.Doctor:
            user.is_doctor = True
        elif usertype == UserType.Nurse:
            user.is_nurse = True
        elif usertype == UserType.Patient:
            user.is_patient = True

        user.set_password(password)
        user.save()

        Logging.info("User '%s' created with type '%s'" % (username, usertype.name))

        return True, user

    def get_full_name(self):
        return ('%s %s' % (self.first_name, self.last_name)).strip()

    def get_short_name(self):
        return self.username

    def get_user_type(self):
        if self.is_admin:
            return UserType.Administrator
        if self.is_doctor:
            return UserType.Doctor
        if self.is_nurse:
            return UserType.Nurse
        if self.is_patient:
            return UserType.Patient

